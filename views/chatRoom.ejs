<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Room <%= room %> - PingPal</title>
  <link rel="icon" href="/images/Logo.png" type="image/png" sizes="32x32">
  <link rel="apple-touch-icon" href="/images/Logo.png"> <!-- for iOS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="/css/chatRoom.css">
  <style>
  </style>
</head>
<body class="dark">
  <audio id="userJoinSound" src="/images/iphone notification tone.mp3" preload="auto"></audio>

  <!-- Header -->
  <div class="chat-header">

        <!-- Floating username box -->
    <div id="myUsernameBadge" class="username-badge">
      <i class="fas fa-user"></i><%= username %> (you)
    </div>


    <div class="room-number">
      <h2 style="color: var( --text-color);">ROOM-<%= room %></h2>
      <small id="usersOnline" style="color: rgb(20, 124, 20); font-weight:700;">0 users online</small>
    </div>
    <button class="theme-toggle"><i class="fas fa-sun"></i> </button>
  </div>

  <!-- real topic  -->
   <div class="realTopic_suggestion">HOT _ Topics</div>

  <!-- Chat body -->
  <div class="chat-body" id="chatBody">
    <!-- messages are appended by sockets dynamically! -->
  </div>

  <!-- Footer -->
  <div class="chat-footer">
    <input id="msgInput" type="text" placeholder="Type your message...">
    <button id="sendBtn">‚û§</button>
  </div>

  
 <script src="/socket.io/socket.io.js"></script>
<script>


let audioUnlocked = false;

function unlockAudio() {
  const joinSound = document.getElementById('userJoinSound');
  if (joinSound && !audioUnlocked) {
    joinSound.play().catch(() => {}); // try to play
    joinSound.pause();                 // immediately pause
    joinSound.currentTime = 0;        // reset
    audioUnlocked = true;
  }
}

// Unlock on first click or keypress
document.addEventListener('click', unlockAudio, { once: true });
document.addEventListener('keypress', unlockAudio, { once: true });




  const socket = io();
  const username = "<%= username %>";
  const room = "<%= room %>";
  const myUsernameBadge = document.getElementById('myUsernameBadge');
  myUsernameBadge.textContent = `${username} (you)`;


  const chatBody = document.getElementById('chatBody');
  const input = document.getElementById('msgInput');
  const sendBtn = document.getElementById('sendBtn');
  const usersOnline = document.getElementById('usersOnline');

  // Join the room
  socket.emit('joinRoom', { room, username });

  // Receive messages (user/system)
  socket.on('message', data => {
    const msgRow = document.createElement('div');
    if (data.username === 'System') {
      msgRow.className = 'system-msg';
      msgRow.innerText = `‚öôÔ∏è_SYSTEM_:  ${data.message}`;

       // üëá Play sound if someone joined/rejoined
   if (data.username === 'System' && (data.message.includes('joined the room') || data.message.includes('rejoined the room'))) {
    const joinSound = document.getElementById('userJoinSound');
    if (joinSound && audioUnlocked) joinSound.play();
  }
    } else {
      msgRow.className = data.username === username ? 'message-row outgoing' : 'message-row incoming';
      msgRow.innerHTML = `
  <div class="msg-content">
    ${data.username === username ? '' : `
      <img class="avatar" src="https://api.dicebear.com/9.x/avataaars/svg?seed=${encodeURIComponent(data.username)}" alt="avatar">
    `}
    <div class="bubble">
      <div class="username">${data.username}</div>
      <div class="message">${data.message}</div>
      <span class="timestamp">${new Date(data.time).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}</span>
    </div>
    ${data.username === username ? `
      <img class="avatar" src="https://api.dicebear.com/9.x/avataaars/svg?seed=${encodeURIComponent(data.username)}" alt="avatar">
    ` : ''}
  </div>
`;

    }
    chatBody.appendChild(msgRow);
    chatBody.scrollTop = chatBody.scrollHeight;
  });

  // Send message
  sendBtn.addEventListener('click', () => {
    const text = input.value.trim();
    if (text) {
      socket.emit('message', { username, message: text, time: new Date().toISOString() });
      input.value = '';
    }
  });
  input.addEventListener('keypress', e => { if (e.key === 'Enter') sendBtn.click(); });

  // Online users count
  socket.on('usersOnline', count => {
    usersOnline.textContent = count + " users online";
  });

  // Username taken alert
  socket.on('usernameTaken', msg => {
    alert(msg);
    window.location.href = "/random-chatRoom";
  });
</script>

<script>
  const themeToggleBtn = document.querySelector('.theme-toggle');
  const body = document.body;
  const icon = themeToggleBtn.querySelector("i");

  // Load saved theme
  if (localStorage.getItem('theme') === 'light') {
    body.classList.remove('dark');
    icon.classList.replace("fa-sun", "fa-moon");
  } else {
    body.classList.add('dark');
    icon.classList.replace("fa-moon", "fa-sun");
  }

  // Toggle theme
  themeToggleBtn.addEventListener('click', () => {
    body.classList.toggle('dark');
    const isDark = body.classList.contains('dark');

    if (isDark) {
      icon.classList.replace("fa-moon", "fa-sun");
    } else {
      icon.classList.replace("fa-sun", "fa-moon");
    }

    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });
</script>



<script>
  const topicBox = document.querySelector(".realTopic_suggestion");
  const NEWS_API_KEY = ""; 

  const fallbackTopics = [
    "AI is reshaping jobs worldwide",
    "SpaceX plans new Mars mission",
    "Climate change impacts rising seas",
    "Global stock markets see volatility",
    "Breakthrough in cancer research",
    "World Cup fever is everywhere",
    "Tech giants face new regulations"
  ];

  function showTopic(text) {
    topicBox.innerHTML = `üí° <span>Hot Topic:</span> <span class="topic-link" style="cursor:pointer; color:#1e90ff; text-decoration:underline">${text}</span>`;

    // üëâ Make it clickable ‚Üí auto-insert into chat input
    const link = topicBox.querySelector(".topic-link");
    if (link) {
      link.addEventListener("click", () => {
        input.value = `Let's talk about: ${text}`;
        input.focus();
      });
    }
  }

  function showFallbackTopic() {
    const topic = fallbackTopics[Math.floor(Math.random() * fallbackTopics.length)];
    showTopic(topic);
  }

  async function fetchTopic() {
    try {
      if (NEWS_API_KEY) {
        // ‚úÖ Fetch from GNews
        const res = await fetch(`https://gnews.io/api/v4/top-headlines?lang=en&max=10&apikey=${NEWS_API_KEY}`);
        const data = await res.json();
        if (data.articles && data.articles.length > 0) {
          const randomArticle = data.articles[Math.floor(Math.random() * data.articles.length)];
          return showTopic(randomArticle.title);
        }
      } else {
        // ‚úÖ Fallback to Google News RSS (no key required)
        const rssUrl = "https://news.google.com/rss?hl=en-US&gl=US&ceid=US:en";
        const res = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(rssUrl)}`);
        const data = await res.json();

        const parser = new DOMParser();
        const xml = parser.parseFromString(data.contents, "text/xml");
        const items = xml.querySelectorAll("item title");

        if (items.length > 0) {
          const randomItem = items[Math.floor(Math.random() * items.length)].textContent;
          return showTopic(randomItem);
        }
      }
    } catch (err) {
      console.error("Error fetching topic:", err);
    }

    // üö® If everything fails
    showFallbackTopic();
  }

  // Show immediately
  fetchTopic();

  // Refresh every 10 minutes
  setInterval(fetchTopic, 600000);
</script>


</body>
</html>
